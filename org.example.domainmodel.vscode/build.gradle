buildscript {
	repositories {
		jcenter()
	}
}

plugins {
	id 'com.github.johnrengelman.shadow' version '1.2.3'
	id 'net.researchgate.release' version '2.4.0'
}

apply plugin: 'java'

dependencies {
	compile project(':org.example.domainmodel.ide')
}


task ioShadowJar(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar, dependsOn: assemble) {
	manifest.attributes 'Main-Class': 'org.example.domainmodel.ide.RunEmbeddedServer'
	from(project.convention.getPlugin(JavaPluginConvention).sourceSets.main.output)
	configurations = [project.configurations.runtime]
	exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
	baseName = 'domainmodel-uber'
	classifier = null
	version = null
	destinationDir = file("$projectDir/src")
	append('plugin.properties')
	mergeServiceFiles()
}

task shadowJars {
	dependsOn ioShadowJar
}

clean.doFirst {
    delete tasks.ioShadowJar.archivePath
    delete file("${project.projectDir}/node_modules")
}


def vsce = file("${project.projectDir}/node_modules/vsce/out/vsce")

task npmInstall(type: Exec, dependsOn : shadowJars) {
    commandLine 'npm','install'
}

task vscodeExtension(type: Exec, dependsOn: [npmInstall,shadowJars]) {
    ext.destDir = new File(buildDir, 'vscode')
    ext.archiveName = "domainmodel-${project.version}.vsix"
    ext.destPath = "$destDir/$archiveName"
    print projectDir
    commandLine = vsce
    args = ['package', '--out', destPath]
  
    doFirst {
        destDir.mkdirs()
    }
}


task installExtension(type: Exec, dependsOn: vscodeExtension) {
    if (System.getProperty('os.name').toLowerCase().contains('windows')) {
        commandLine 'cmd', '/c', 'code.cmd', '--install-extension', vscodeExtension.destPath
    } else {
        commandLine 'code', '--install-extension', vscodeExtension.destPath
    }
}

def exampleProject = file("$rootProject.projectDir/example")

task startCode(type:Exec, dependsOn: installExtension) {
    if (System.getProperty('os.name').toLowerCase().contains('windows')) {
        commandLine 'cmd', '/k', 'code.cmd', '--new-window', exampleProject
    } else {
        commandLine 'code', '--new-window', exampleProject
    }
}