buildscript {
	repositories {
		jcenter()
	}
	dependencies {
		classpath 'com.moowork.gradle:gradle-node-plugin:0.13'
	}
}

plugins {
	id 'com.github.johnrengelman.shadow' version '1.2.3'
	id 'com.moowork.node' version '0.13'
	id 'net.researchgate.release' version '2.4.0'
}

apply plugin: 'java'

dependencies {
	compile project(':org.example.domainmodel.ide')
}

node {
    version = '6.2.2'
    npmVersion = '3.10.6'
    download = true
    workDir = file("${project.buildDir}/nodejs")
    nodeModulesDir = file("${project.projectDir}")
}

task ioShadowJar(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar, dependsOn: assemble) {
	manifest.attributes 'Main-Class': 'org.example.domainmodel.ide.RunEmbeddedServer'
	from(project.convention.getPlugin(JavaPluginConvention).sourceSets.main.output)
	configurations = [project.configurations.runtime]
	exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
	baseName = 'domainmodel-uber'
	classifier = null
	version = null
	destinationDir = file("$projectDir/src")
	append('plugin.properties')
	mergeServiceFiles()
}

task shadowJars {
	dependsOn ioShadowJar
}

clean.doFirst {
    delete tasks.ioShadowJar.archivePath
}

task npmInstallVsce(type: NpmTask, dependsOn: npmSetup) {
	group 'Node'
	description 'Installs the NodeJS package "Visual Studio Code Extension Manager"'
	args = [ 'install', 'vsce' ]
}

npmInstall.dependsOn 'shadowJars'

def vsce = file("$node.nodeModulesDir.path/node_modules/vsce/out/vsce")

task vscodeExtension(type: Exec, dependsOn: [nodeSetup,npmInstall, npmInstallVsce]) {
    ext.destDir = new File(buildDir, 'vscode')
    ext.archiveName = "domainmodel-${project.version}.vsix"
    ext.destPath = "$destDir/$archiveName"

    workingDir projectDir
    doFirst {
        destDir.mkdirs()
        commandLine nodeSetup.variant.nodeExec, vsce, 'package', '--out', destPath
		//commandLine 'cmd.exe','/k','xxx.bat'
    }
}

plugins.withType(com.moowork.gradle.node.NodePlugin) {
	node {
		workDir = file("$project.buildDir/nodejs")
		nodeModulesDir = projectDir
	}
}

task installExtension(type: Exec, dependsOn: vscodeExtension) {
    if (System.getProperty('os.name').toLowerCase().contains('windows')) {
        commandLine 'cmd', '/c', 'code.cmd', '--install-extension', vscodeExtension.destPath
    } else {
        commandLine 'code', '--install-extension', vscodeExtension.destPath
    }
}

def exampleProject = file("$rootProject.projectDir/example")

task startCode(type:Exec, dependsOn: installExtension) {
    if (System.getProperty('os.name').toLowerCase().contains('windows')) {
        commandLine 'cmd', '/k', 'code.cmd', '--new-window', exampleProject
    } else {
        commandLine 'code', '--new-window', exampleProject
    }
}